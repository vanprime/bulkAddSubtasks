name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install Dependencies
        run: npm ci

      - name: Build Extension
        run: npm run build

      - name: Package Extension
        id: package_extension
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          EXTENSION_FILE="${NAME}_${VERSION}.zip"
          echo "EXTENSION_FILE=${EXTENSION_FILE}" >> $GITHUB_ENV
          echo "::set-output name=extension_file::${EXTENSION_FILE}"
          cd "./dist/${NAME}" && zip -r "../../${EXTENSION_FILE}" .
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: extension
          path: ${{ steps.package_extension.outputs.extension_file }}

    outputs:
      extension_file: ${{ steps.package_extension.outputs.extension_file }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: extension
          path: .

      - name: Get last commit message
        id: get_commit
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Get version
        id: get_version
        run: echo "::set-output name=VERSION::$(node -p "require('./package.json').version")"

      - name: Create Release
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "${{ steps.get_version.outputs.VERSION }}",
              "target_commitish": "${{ github.sha }}",
              "name": "${{ steps.get_version.outputs.VERSION }}",
              "body": "${{ env.COMMIT_MESSAGE }}",
              "draft": false,
              "prerelease": false,
              "auto_generate": false
            }')
          UPLOAD_URL=$(echo $RESPONSE | jq -r .upload_url | sed -e "s/{?name,label}//")
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV
        shell: bash

      - name: Upload Artifact
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/zip" \
            "${UPLOAD_URL}?name=${{ needs.build.outputs.extension_file }}" \
            --upload-file ${{ needs.build.outputs.extension_file }}
        shell: bash